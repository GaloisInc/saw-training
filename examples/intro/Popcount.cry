// Begin Cryptol Popcount
module Popcount where

popCount : [32] -> [32]
popCount bits = ic ! 0 where
     ic = [0] # [ if elt then prev + 1 else prev | elt <- bits | prev <- ic]
// End Cryptol Popcount

// Begin Cryptol Popcount64
popCount64 : [64] -> [64]
popCount64 bits = ic ! 0 where
     ic = [0] # [ if elt then prev + 1 else prev | elt <- bits | prev <- ic]
// End Cryptol Popcount64

// Decided to use concrete bit widths instead of polymorphic version:
// popCountPoly : {a,b} (fin a, b >= 1, b == (lg2 a)) => [a] -> [b]
// popCountPoly bits = ic ! 0 where
//     ic = [0] # [ if elt then prev + 1 else prev | elt <- bits | prev <- ic]
// 
// popCount64 : [64] -> [64]
// popCount64 bits = 0 # (popCountPoly bits)
