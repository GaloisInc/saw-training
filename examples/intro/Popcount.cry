// Begin Cryptol Popcount
module Popcount where

popCount : [32] -> [32]
popCount bits = ic ! 0 where
     ic = [0] # [ if elt then prev + 1 else prev | elt <- bits | prev <- ic]
// End Cryptol Popcount

// Had to make this monomorphic - there must be a way for SAW to handle it, though
// popCount : {a,b} (fin a, b >= 1, b == (lg2 a)) => [a] -> [b]
// popCount bits = ic ! 0 where
//     ic = [0] # [ if elt then prev + 1 else prev | elt <- bits | prev <- ic]
